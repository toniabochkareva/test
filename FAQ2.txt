1.  git clone - копирование репозитория на локальный компьютер
2.  git status - статус
3.  git add _название файла_ - даем понять системе, что такой файлик существует (смена статуса)
(из "Untracked" в "new file")
git add .  - добавляем все файлы сразу
4. git commit -m "комментарий по коммиту" - сделать коммит
5. git push - чтобы коммит попал на удаленный репозиторий

Команды для GitBush
cat _название файла_ - просмотреть инфу о конкретном файле
git fetch -показывает, что есть изменения на нашем удаленном репозитории
git pull - запулить изменения себе на локалку с удаленного репозитория
touch _название файла_  - создать файл с определенным именем
git checkout _название файла_ - откатить изменение файла
git checkout . - откатить изменения во всех файлах
git stash  - отправить последние изменения файлов во временное хранилище
git stash pop - вернуться к изменениям из временного хранилища
git stash - удалить инфу из временного хранилища
 git log - все коммиты, которые происходили (дата, автор) Q -для выхода
git log --author toniabochkareva - посмотреть коммиты определенного автора
git show _хэк комита_ -просмотреть содержание определенного комита
git show (без хэша) - пкаоежет последний коммит
git blame _название файла_ - инфа об авторе файла
git blame _название файла_ | grep _Значение_ - узнать, кто добавлял определенный участок кода
git blame _название файла_ | grep _Имя автора_ - узнать, что добавлял конкретный юзер

echo "Добавление строки" >> file2.txt - добавление строки в определенный файл
git diff -покажет, какие изменения были в этом файлике

ls  -показывает, какий файлы содержатся в репозитории
cat _название файла_ - содержимое файла
echo "new line" >> file4.txt - добавление нового файла с новым названием
git commit -a -m "текст коммита"
git commit -am "текст коммита"
git reset HEAD~1 - вернуться на одиш шаг назад
git reset HARD~1 - БЕЗВОЗВРАТНО удалить изменения

РАБОТА С ВЕТКАМИ:
git branch _название ветки_ - cоздание новой ветки 
git branch - показывает ветки
git checkout _название ветки_ - переключение ветки на существующу
git checkout  -    -вернуться в мастер ветку
git push -u origin _Название ветки_  - связать локальную ветку с удаленной
git merge _название ветки_ - смержить ветки
git branch удаление ветки
git branch -m _название старой ветки_ _новое название_  -  переименование ветки
git push origin :_название старой ветки_
git branch -d _название  ветки_   -удаление ветки с локального репозитория
git fetch origin _название ветки_ - возврат ветки, которую мы хотим вернуть



1 конфликт: Репозитории не похожи друг на друга (содержимое)
Решение:
git pull
git push

2 конфликт: Одна и так же строка отредактирована и в локалке и в удаленном репозитории
Решение:
git merge -abort - Отдать разрабу, чтобы он сам решил, какая версия строки актуальна





